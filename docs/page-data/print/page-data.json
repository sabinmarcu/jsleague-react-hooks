{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"82e937e9-6fd8-56ff-85d8-6805b3eb0c57","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = [themes[\"default\"]];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(SectionTitle, {\n    mdxType: \"SectionTitle\"\n  }, \"Intro to React Hooks\"), mdx(Layout, {\n    noTitle: true,\n    noSubtitle: true,\n    icon: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646147/logo-slim-white.png',\n    background: 'https://s3.amazonaws.com/media-p.slid.es/uploads/841906/images/5646146/Screen_Shot_2019-01-05_at_1.59.35_PM.png',\n    style: {\n      color: 'white'\n    },\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Intro to React Hooks\"), mdx(\"h4\", null, \"23 November 2019\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Code of Conduct\"), mdx(\"div\", {\n    style: {\n      textAlign: 'justify '\n    }\n  }, mdx(\"p\", null, \"We expect cooperation from all participants to help ensure a safe environment for everybody.\"), mdx(\"p\", null, \"We treat everyone with respect, we refrain from using offensive language and imagery, and we encourage to report any derogatory or offensive behavior to a member of the JSLeague community.\"), mdx(\"p\", null, \"We provide a fantastic environment for everyone to learn and share skills regardless of gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion (or lack thereof), or technology choices.\"), mdx(\"p\", null, \"We value your attendance and your participation in the JSLeague community and expect everyone to accord to the community Code of Conduct at all JSLeague workshops and other events.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Split, {\n    mdxType: \"Split\"\n  }, mdx(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '50vw'\n    }\n  }, mdx(\"img\", {\n    src: \"https://scontent.fotp3-2.fna.fbcdn.net/v/t1.0-9/30516640_1677492658984219_7229603649175945216_n.jpg?_nc_cat=100&_nc_ohc=11itfIy5bbQAQkOCwfY45pBTxNccawCp9HnRKEB1Krcoza6cD_ktCxq8w&_nc_ht=scontent.fotp3-2.fna&oh=f7b0211986cc81d300c37de914ee18a2&oe=5E421707\",\n    style: {\n      borderRadius: \"100%\",\n      width: '25vmin',\n      height: '25vmin'\n    }\n  })), mdx(\"div\", {\n    style: {\n      textAlign: 'left',\n      width: '50vw'\n    }\n  }, mdx(\"h2\", null, \"Sabin Marcu\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"li\", null, \"Software Engineer @ R/GA\"), mdx(\"li\", null, \"Anything web since '09\"), mdx(\"li\", null, \"React since 2015\"), mdx(\"li\", null, \"React & GraphQL @ JSLeague\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"React Hooks\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(\"img\", {\n    \"src\": \"https://assets.bigcartel.com/product_images/240790457/nope.jpg?auto=format&fit=max&h=1200&w=1200\",\n    \"alt\": \"Meme\"\n  }), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"React Components \", \"&\", \" Lifecycle\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"React Component Lifecycle\"), mdx(\"img\", {\n    \"src\": \"https://miro.medium.com/max/1718/1*u8hTumGAPQMYZIvfgQMfPA.jpeg\",\n    \"alt\": \"React Component Lifecycle\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"React Component Mechanics\"), mdx(\"img\", {\n    \"src\": \"https://pbs.twimg.com/media/DZ-97vzW4AAbcZj.jpg\",\n    \"alt\": \"React Component Mechanics\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"React Hooks Lifecycle\"), mdx(\"img\", {\n    \"src\": \"https://raw.githubusercontent.com/donavon/hook-flow/master/hook-flow.png\",\n    \"alt\": \"React Hooks Lifecycle\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"React Hooks Mechanics\"), mdx(\"img\", {\n    \"src\": \"https://repository-images.githubusercontent.com/196048036/cc006f00-a420-11e9-99a6-d0bdf5f0c7bb\",\n    \"alt\": \"React Hooks Mechanics\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(\"img\", {\n    \"src\": \"https://pbs.twimg.com/media/D9BnhXSUIAA2cTk.jpg\",\n    \"alt\": \"Meme\"\n  }), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(Split, {\n    style: {\n      alignItems: 'flex-start',\n      height: 'auto'\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", {\n    style: {\n      textAlign: 'left'\n    }\n  }, mdx(\"h2\", null, \"Components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Global Lifecycle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uses Methods to handle state changes\"))), mdx(\"div\", {\n    style: {\n      textAlign: 'left'\n    }\n  }, mdx(\"h2\", null, \"Hooks\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No global Lifecycle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uses the concept of Lifecycle on a per-effect basis\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uses pure functions to treat state changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Makes use of determinism to define data flow\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Introduction\"), mdx(\"img\", {\n    \"src\": \"https://itcsecure.com/wp-content/uploads/2017/06/are-you-ready.jpg\",\n    \"alt\": \"Ready?\"\n  }), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useState\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useState\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useState\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"class Counter extends Component {\\n    state = {\\n        counter: 0\\n    }\\n\\n    increment = () => this.setState(\\n        ({ counter }) => ({ counter: counter + 1 })\\n    )\\n\\n    decrement = () => this.setState(\\n        ({ counter }) => ({ counter: counter - 1 })\\n    )\\n\\n    render() {\\n        return <div>\\n            <button \\n              onClick={this.increment}\\n            >Increment</button>\\n\\n            <p>Count: {counter}<p> \\n\\n            <button \\n              onClick={this.decrement}\\n            >Increment</button>\\n        </div>\\n    }\\n}\\n\")), mdx(\"p\", null, \"Your classic counter class, right?\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:4\",\n    \"2:4\": true\n  }), \"\")), mdx(\"p\", null, \"We have our state...\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:8,10:12\",\n    \"6:8,10:12\": true\n  }), \"\")), mdx(\"p\", null, \"We have our increment and decrement functions...\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14:30\",\n    \"14:30\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"And finally our render function... \"), mdx(\"p\", null, \"Pretty standard, right?\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useState\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Counter = () => {\\n    const [count, setCount] = useState(0);\\n\\n    const increment = () => \\n      setCount(count + 1);\\n\\n    const decrement = () => \\n      setCount(count - 1);\\n\\n    return <div>\\n\\n        <button \\n          onClick={increment}\\n        >Increment</button>\\n\\n        <p>Count: {counter}<p> \\n\\n        <button \\n          onClick={decrement}\\n        >Increment</button>\\n\\n    </div>;\\n}\\n\")), mdx(\"p\", null, \"Well, here we have the React Hooks version.\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\")), mdx(\"p\", null, \"We have our state...\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:8\",\n    \"4:8\": true\n  }), \"\")), mdx(\"p\", null, \"Our setters...\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:30\",\n    \"10:30\": true\n  }), \"\")), mdx(\"p\", null, \"And our render.\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"p\", null, \"Simpler and more to the point, right?\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2[12:27,40]\",\n    \"2[12:27,40]\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's break it down.\"), mdx(\"p\", null, \"We create a new state, with initial value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \", and receive the value (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \") and a setter (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setCount\"), \")\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5,8\",\n    \"5,8\": true\n  }), \"\")), mdx(\"p\", null, \"Then our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decrement\"), \" methods simply use the setters.\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useState\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useState - Takeaways\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Granular Control\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memoized Functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Takes in an update object or update function ( T | T => T )\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Changes value and setter on each value change\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useState\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useState - Best Practices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep the amount of state data to a minimum\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prefer derived data (see: later)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make sure that, if you need your state to be a function, you prevent useState from treating your inbound state as an update function ( T => T ). \"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useEffect\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useEffect\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useEffect\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"class Counter extends Component {\\n    state = {\\n        counter: 0\\n    }\\n\\n    componentDidMount() {\\n        document.title = `Ready to count!`;\\n    }\\n\\n    componentDidUpdate(props, state) {\\n        if (this.state.counter !== state.counter) {\\n            document.title = `Counted: ${state.counter}`;\\n        }\\n    }\\n\\n    render() {\\n        return <div>\\n            <button onClick={increment}>Increment</button>\\n            <p>Count: {counter}<p> \\n            <button onClick={decrement}>Increment</button>\\n        </div>\\n    }\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Again, counter, but with a twist. We'll skip the state part, for now.\"), mdx(\"p\", null, \"As you can see, we're updating the document title on changes. \"), mdx(\"p\", null, \"Which means...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:8\",\n    \"6:8\": true\n  }), \"\")), mdx(\"p\", null, \"We need to update on mount...\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"10:15\",\n    \"10:15\": true\n  }), \"\")), mdx(\"p\", null, \"And on component update, to check if the counter has indeed changed, and then update the title.\")))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useEffect\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Counter = () => {\\n    const [count, setCount] = useState(0);\\n\\n    useEffect(\\n        () => document.title = `Counted ${count}`,\\n        [count],\\n    );\\n    useEffect(\\n        () => document.title = `Ready to count`,\\n        [],\\n    );\\n\\n    return <div>\\n        <button onClick={increment}>Increment</button>\\n        <p>Count: {counter}<p> \\n        <button onClick={decrement}>Increment</button>\\n    </div>;\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"In hooks, we can simulate both, but with better control.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:7\",\n    \"4:7\": true\n  }), \"\")), mdx(\"p\", null, \"We can update the title on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" changes...\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:11\",\n    \"8:11\": true\n  }), \"\")), mdx(\"p\", null, \"And on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mount\"), \" (in hooks terms, execute effect only once).\")), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:7\",\n    \"4:7\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's break it down.\"), mdx(\"p\", null, \"This translates to: \"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Execute this function\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"When an item in this array has changed (in our case, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \")\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:11\",\n    \"8:11\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Whereas this translates to: \"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"9\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Execute this function...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"10\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"When... well, our array is empty, so only once. \"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \"/\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" parameter, instead of an empty array would mean 'execute every time'.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useEffect\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const NotificationsBadge = ({ id }) => {\\n    const [notifications, setNotifications] = useState([]);\\n\\n    useEffect(\\n        () => {\\n            const subscription = API.subscribeToNotifications(\\n                id,\\n                notification => setNotifications(\\n                    notifications => [...notifications, notification]\\n                )\\n            );\\n            return subscription.unsubscribe;\\n        },\\n        [id],\\n    );\\n\\n    return (...);\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's take another example. Subscribing to notifications.\"), mdx(\"p\", null, \"We want to subscribe to notifications for a given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \", but \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"unsubscribe\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"resubscribe\"), \" once the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" changes.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:15\",\n    \"4:15\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's break this one down, as well, and see how the unsubscribe works.\"), mdx(\"p\", null, \"Let's say our subscription API has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscribeToNotifications\"), \" function that takes in an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" and a callback with new notifications.\"), mdx(\"p\", null, \"The subscription also has an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unsubscribe\"), \" method.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"14\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Our first step, actually, is to define our dependencies. \"), mdx(\"p\", null, \"In other words, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"when do we do make any changes\"), \"?\"), mdx(\"p\", null, \"In our case, when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" changes, naturally\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:11\",\n    \"6:11\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Then we subscribe to our notifications.\"), mdx(\"p\", null, \"We're not going to go into state, but the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"subscription\"), \" variable. Right now, we're subscribed to notifications for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id = 3\"), \", let's say.\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" hook will execute the return value from the execution function on subsequent hook functions. Therefore...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"12\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"12\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"We return our unsubscribe method.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's take an overall look, again, and go through it.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useEffect\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useEffect - Takeaways\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scoped to memoized input array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Takes in an effect function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Effect function acts as an effect constructor, that returns the effect destructor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Creates a subscription\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handles functionality\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Returns the unsubscribe handler\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useEffect\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useEffect - Best Practices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't duplicate effects on input array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use block functions as a default, to prevent useEffect interpreting any return values as functions (when they are by-products of an update process, for example)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If dealing with effects that need destructuring on change, make sure to return a destructure function\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useMemo\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useMemo\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useMemo\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Counter = () => {\\n    const [count, setCount] = useState(0);\\n\\n    const [hasCounted, setHasCounted] = useState(false);\\n    useEffect(\\n        () => { \\n            if (count !== 0) { \\n                setHasCounted(true); \\n            } \\n        },\\n        [count],\\n    );\\n\\n    const title = useMemo(\\n        () => hasCounted ? `Counted ${count}` : `Ready to count`,\\n        [hasCounted, count],\\n    );\\n    useEffect(\\n        () => document.title = title,\\n        [title],\\n    );\\n\\n    return <div>\\n        <h1>{title}</h1>\\n        <button onClick={increment}>Increment</button>\\n        <p>Count: {counter}<p> \\n        <button onClick={decrement}>Increment</button>\\n    </div>;\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's take the counter example again.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"We have our counter state...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"But we take another state, that we will update with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \", to show the difference.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:12\",\n    \"5:12\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"We use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" to update our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hasCounted\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" change, as long as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" is different from 0.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14:17\",\n    \"14:17\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"However, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" can be more helpful while \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"deriving\"), \" data from state.\"), mdx(\"p\", null, \"In this case, we're depending on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hasCounted\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"count\"), \" to compute the title (both of the component, and the document).\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" has the same pattern as all the other hooks, a function to be executed, when any of the dependencies have changed. \"), mdx(\"p\", null, \"The result of the function will be assigned to the variable (in our case, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \");\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"18:21\",\n    \"18:21\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"We can use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" more effectively when there is a side-effect to be considered, such as updating the document title.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useMemo\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useMemo - Takeaways\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Granular Control\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Memoized Returns\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mostly used for derived data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Takes a function that returns the value ( () => T ) \"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useMemo\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useMemo - Best Practices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use as much as needed instead of useState\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Be careful with the input array, make sure it's satisfactory to the output\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remember that useState setters change on value set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If derived data is a function, use useCallback instead\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useCallback\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useCallback\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useCallback\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const Counter = () => {\\n    const [count, setCount] = useState(0);\\n\\n    const increment = useMemo(\\n        () => \\n            () => setCount(count => count + 1),\\n        [setCount],\\n    );\\n    const decrement = useCallback(\\n        () => setCount(count => count - 1),\\n        [setCount],\\n    );\\n\\n    return <div>\\n        <button onClick={increment}>Increment</button>\\n        <p>Count: {counter}<p> \\n        <button onClick={decrement}>Increment</button>\\n    </div>;\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"All in all, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCallback\"), \" is a shorthand for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \".\"), mdx(\"p\", null, \"Consider the example of wanting to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"memo\"), \" a function...\"), mdx(\"p\", null, \"Where the form of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(() => T, D)\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" is our result, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"D\"), \" the list of dependencies, if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" is a function of type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"() => V\"), \", it resolves to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(() => () => V, D)\"), \".\"), mdx(\"p\", null, \"In the same situation, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCallback\"), \" would have a form of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(T, D)\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(() => V, D)\")))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4:8\",\n    \"4:8\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useMemo\"), \" we'd have a function returning our function (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \").\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:12\",\n    \"9:12\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"While \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCallback\"), \" would be more useful in generating the other function (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decrement\"), \")\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useContext\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useContext\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useContext\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const CounterContext = \\n    createContext({ counter, increment, decrement });\\n\\nclass Counter extends Component {\\n    static contextType = CounterContext;\\n\\n    render() {\\n        const { counter, increment, decrement } =\\n            this.context;\\n\\n        return <div>\\n            <button onClick={increment}>Increment</button>\\n            <p>Count: {counter}<p> \\n            <button onClick={decrement}>Increment</button>\\n        </div>\\n    }\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's start off, again, with our counter, in Component format. \"), mdx(\"p\", null, \"Let's assume we've already created a context with our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"counter\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"increment\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"decrement\"), \" methods, and created a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Provider\"), \" somewhere higher up the chain of command.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Then we'd have to declare it as the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"only\"), \" (!!!) context type available to this Component\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:9\",\n    \"8:9\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"And then consume it to be used in rendering.\"), mdx(\"p\", null, \"The con here is that there can only be only one context.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useContext\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const CounterContext = \\n    createContext({ counter, increment, decrement });\\n\\nconst Counter = () => (\\n    <CounterContext.Consumer>\\n        {({ counter, increment, decrement }) => (\\n            <div>\\n                <button onClick={increment}>Increment</button>\\n                <p>Count: {counter}<p> \\n                <button onClick={decrement}>Increment</button>\\n            </div>\\n        )}\\n    </CounterContext.Consumer>\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"Let's take another example, with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"render props\"), \" and a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Consumer\")))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5,13\",\n    \"5,13\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"Then we'd have to render the consumer...\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:12\",\n    \"6:12\": true\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"And then use a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"render prop\"), \" to retrieve the data, and use it in rendering.\"), mdx(\"p\", null, \"The cons here are that the information cannot be consumed before rendering, at this component's level.\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useContext\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const CounterContext = \\n    createContext({ counter, increment, decrement });\\n\\nconst Counter = () => {\\n    const { counter, increment, decrement } = useContext(CounterContext);\\n    return (\\n        <div>\\n            <button onClick={increment}>Increment</button>\\n            <p>Count: {counter}<p> \\n            <button onClick={decrement}>Increment</button>\\n        </div>\\n    );\\n}\\n\")), mdx(\"div\", null, mdx(\"p\", null, \"And finally, what we've been waiting for, the hooks variant.\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5\"\n  }), \"\")), mdx(\"div\", null, mdx(\"p\", null, \"All we have to do is consume the context directly\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\")), mdx(\"div\", null, \"Pros include having multiple contexts consumed in the same place, and a lot less code to write for one thing.\", mdx(\"p\", null, \"Cons: ???\"))))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useContext\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"useContext - Takeaways\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can consume N contexts, before rendering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be used in conjunction with other use hooks\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Custom Hooks\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Custom Hooks\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Custom Hooks\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"h2\", null, \"Hooks === Functions\"), mdx(\"div\", {\n    style: {\n      maxWidth: 1000\n    }\n  }, mdx(\"p\", null, \"Therefore, any functionality created within a function, or any combination of hooks used can be abstracted into a single function called a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Custom Hook\"), \".\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Custom Hooks\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"div\", {\n    style: {\n      maxWidth: 1000\n    }\n  }, mdx(\"p\", null, \"It is both an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"incredibly simple concept\"), \", as a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"incredibly powerful concept\"), \". This way, functionality used throughout the application (or business, or the open source community, etc) can easily be abstracted, refactored and distributed.\"), mdx(\"p\", null, \"It also allows for logic to be abstracted away from the rendering portion, without any over-head.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Exercise Time\"), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"img\", {\n    \"src\": \"https://timedotcom.files.wordpress.com/2017/01/time-magazine-exercise-fitness-health-bethan-mooney-74.jpg\",\n    \"alt\": \"Meme\"\n  })), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"Exercise Time\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Exercise time!\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useFocus\"), mdx(Layout, {\n    hader: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Preview Component\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useFocus\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"div\", {\n    style: {\n      maxWidth: 1000\n    }\n  }, mdx(\"p\", null, \"In this exercise, we will be creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFocus\"), \" functionality, and, further down the line, a custom hook that will handle the functionality universally.\"), mdx(\"p\", null, \"For this purpose, we will be using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preview Component\"), \".\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useFocus\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"This is how the preview component will look like without our edits:\"), mdx(\"style\", null, \"\\n  .MuiCardContent-root > div {\\n    font-size: initial;\\n  }\\n\"), mdx(\"div\", {\n    style: {\n      minWidth: 600\n    }\n  }, mdx(Preview, {\n    id: \"preview\",\n    mdxType: \"Preview\"\n  }))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useFocus\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"This is how the preview component will look like \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"with\"), \" our edits:\"), mdx(\"style\", null, \"\\n  .MuiCardContent-root > div {\\n    font-size: initial;\\n  }\\n\"), mdx(\"div\", {\n    style: {\n      minWidth: 600\n    }\n  }, mdx(Preview, _extends({\n    id: \"preview\",\n    focusable: true\n  }, {\n    title: \"Now I am focusable\",\n    content: '# Hover over me!'\n  }, {\n    mdxType: \"Preview\"\n  })))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useField\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Editor Component\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useField\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"div\", {\n    style: {\n      maxWidth: 1000\n    }\n  }, mdx(\"p\", null, \"In this exercise, we will be creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useField\"), \" functionality, which will handle the input and validation of a certain text field, and which we will then refactor into a component + hook combo.\"), mdx(\"p\", null, \"For this purpose, we will be using the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Editor Component\"), \".\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useField\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"This is how the editor component will look like:\"), mdx(\"style\", null, \"\\n  .MuiCardContent-root > div {\\n    font-size: initial;\\n  }\\n\"), mdx(\"div\", null, mdx(AppWrapper, {\n    mdxType: \"AppWrapper\"\n  }, mdx(Editor, {\n    mdxType: \"Editor\"\n  })))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useField\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"Or, with the addition of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useFocus\"), \"... \"), mdx(\"p\", null, \"This is how the editor component will look like:\"), mdx(\"style\", null, \"\\n  .MuiCardContent-root > div {\\n    font-size: initial;\\n  }\\n\"), mdx(\"div\", null, mdx(AppWrapper, {\n    mdxType: \"AppWrapper\"\n  }, mdx(Editor, {\n    focusable: true,\n    mdxType: \"Editor\"\n  })))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useApp\"), mdx(Layout, {\n    header: true,\n    mdxType: \"Layout\"\n  }, mdx(\"h1\", null, \"Whole App\")), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useApp\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"div\", {\n    style: {\n      maxWidth: 1000\n    }\n  }, mdx(\"p\", null, \"In this exercise, we will be creating a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useApp\"), \" functionality, which will leverage our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useField\"), \" hook and context + \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext\"), \" to abstract the data layer, and offer the fields to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Editor Component\"), \", and the list of values to our \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Preview\"), \" component.\"))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }, \"useApp\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"p\", null, \"This is how the full app should look like:\"), mdx(\"style\", null, \"\\n  .MuiCardContent-root > div {\\n    font-size: initial;\\n  }\\n\"), mdx(\"div\", null, mdx(App, {\n    mdxType: \"App\"\n  }))), mdx(\"hr\", null), mdx(SectionSubtitle, {\n    mdxType: \"SectionSubtitle\"\n  }), mdx(\"img\", {\n    \"src\": \"https://s3.amazonaws.com/media-p.slid.es/uploads/776/images/6425198/pasted-from-clipboard.png\",\n    \"alt\": \"Thank you\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"82e937e9-6fd8-56ff-85d8-6805b3eb0c57","slug":"/jsleague-react-hooks","title":"Intro to React Hooks"}}}